--   задания к практич.занятию 2.4

--   a.   Попробуйте вывести не просто самую высокую зарплату во всей команде, а вывести именно фамилию
--        сотрудника с самой высокой зарплатой.

SELECT e_ID, shortname
FROM empl
WHERE salary IN (SELECT MAX(salary)
				 FROM empl);
				 
--   b.   Попробуйте вывести фамилии сотрудников в алфавитном порядке.
SELECT shortname
FROM empl
ORDER BY shortname;

--   c.   Рассчитайте средний стаж для каждого уровня сотрудников.
SELECT grade,
	   AVG(AGE(CURRENT_DATE,start_work)) AS avg_experience
FROM empl
GROUP BY grade;

--   d.   Выведите фамилию сотрудника и название отдела, в котором он работает.
SELECT --empl.e_ID,
	   empl.shortname,
	   dept.dept_name
FROM empl
LEFT OUTER JOIN dept ON dept.dept_ID=empl.dept_ID;

--   e.   Выведите название отдела и фамилию сотрудника с самой высокой зарплатой в данном отделе и саму зарплату.
WITH
d_s AS (SELECT dept_ID, MAX(salary)
		FROM empl
		GROUP BY dept_ID),
		
e_d_s AS (SELECT empl.shortname,
		  		 empl.salary,
		   		 empl.dept_ID
		  FROM empl
		  INNER JOIN d_s ON (d_s.dept_ID=empl.dept_ID AND d_s.max=empl.salary))
		  
SELECT dept.dept_name, 
	   e_d_s.shortname,
	   e_d_s.salary	   
FROM e_d_s
INNER JOIN dept ON dept.dept_ID=e_d_s.dept_ID
ORDER BY dept.dept_name;

--   f.   * Выведите название отдела, сотрудники которого получат наибольшую премию по итогам года.
--          (порядок рассчёта премии можно узнать в последнем задании предыдущей домашней работы)
/*
	фразу "наибольшую премию" можно трактовать по-разному и может сложиться так, что сумма маленьких премий в большом
	по численности сотрудников отделе превысит сумму пускай даже огромных премий, но в малочисленном отделе, поэтому
	будем ориентироваться на величину среднего коэффициента year_bonus для более адекватного сравнения. Вдобавок в 
	данной задаче размер премии считается по сути индексацией (т.к. об этом не было упоминаний в заданиях прежде),
	т.е. по сути сотрудники получает ежеквартальную оценку эффективности по шкале А-Е, по итогам года она преобразуется
	в числовую оценку (+0,2/+0,1/0/-0,1/-0,2 к 1) и по этой оценке получается величина индексации ЗП (1.2, 1.1, 1.0),
	премия при этом не учитывалась как самостоятельная величина, но при необходимости может быть учтеная отдельным
	коэффициентом.	
*/

WITH 
cases AS
		(SELECT *,
			   CASE
				   WHEN mark = 'A' THEN 0.2
				   WHEN mark = 'B' THEN 0.1
				   WHEN mark = 'C' THEN 0
				   WHEN mark = 'D' THEN -0.1
				   WHEN mark = 'E' THEN -0.2
			   END AS coef
		FROM grades),

bonus AS
		(SELECT e_ID,
			   SUM(coef)+1 AS year_bonus
		FROM cases
		GROUP BY e_ID
		ORDER BY e_ID),
		
joined_bonus AS 
		(SELECT empl.e_ID AS employee_ID,
			    empl.shortname AS employee_name,
			    -- bonus.year_bonus умышленно заполнен не целиком, преобразуем NULL значения
			    -- получающиеся при объединении таблиц в более удобо-читаемый вид, присвоив
			    -- таким ячейкам итоговое значение коэффициента = 1
			    CASE
				 	WHEN bonus.year_bonus ISNULL THEN 1 ELSE bonus.year_bonus
				 END AS year_bonus,
				 empl.dept_ID		
		 FROM empl
		 LEFT OUTER JOIN bonus ON bonus.e_ID = empl.e_ID),

avg_dept AS
			(SELECT dept_id,
			   	    ROUND(AVG(year_bonus),2) AS avg_dept_bonus
			 FROM joined_bonus AS j_b
			 GROUP BY dept_ID
			 ORDER BY avg_dept_bonus DESC)

SELECT dept.dept_name,
	   avg_dept.avg_dept_bonus AS department_average_bonus
FROM avg_dept
INNER JOIN dept ON dept.dept_ID = avg_dept.dept_ID
ORDER BY avg_dept.avg_dept_bonus DESC
LIMIT 1;

--   g.   * Проиндексируйте зарплаты сотрудников с учетом коэффициента премии. Для сотрудников с коэффициентом
--			премии больше 1.2 – размер индексации составит 20%, для сотрудников с коэффициентом премии от 1
--          до 1.2 размер индексации составит 10%. Для всех остальных сотрудников индексация не предусмотрена.

WITH 
cases AS
		(SELECT *,
			   CASE
				   WHEN mark = 'A' THEN 0.2
				   WHEN mark = 'B' THEN 0.1
				   WHEN mark = 'C' THEN 0
				   WHEN mark = 'D' THEN -0.1
				   WHEN mark = 'E' THEN -0.2
			   END AS coef
		FROM grades),

bonus AS
		(SELECT e_ID,
			   SUM(coef)+1 AS year_bonus
		FROM cases
		GROUP BY e_ID
		ORDER BY e_ID),
		
joined_bonus AS 
		(SELECT empl.e_ID AS employee_ID,
			    empl.shortname AS employee_name,
			    CASE
				 	WHEN bonus.year_bonus ISNULL THEN 1 ELSE bonus.year_bonus
				END AS year_bonus,
		 		empl.salary,
		 		CASE
				 	WHEN year_bonus >= 1.2 THEN 1.2
		 			WHEN year_bonus < 1.2 AND year_bonus >= 1 THEN 1.1
		 			ELSE 1
				END AS salary_rising
		 FROM empl
		 LEFT OUTER JOIN bonus ON bonus.e_ID = empl.e_ID)

SELECT employee_name,
	   salary AS old_salary,
	   ROUND(salary*salary_rising) AS new_salary
FROM joined_bonus;

--   h.   *** По итогам индексации отдел финансов хочет получить следующий отчет: 
--   		  вам необходимо на уровень каждого отдела вывести следующую информацию:
/*			i.      Название отдела
			ii.     Фамилию руководителя
			iii.    Количество сотрудников
			iv.     Средний стаж
			v.      Средний уровень зарплаты
			vi.     Количество сотрудников уровня junior
			vii.    Количество сотрудников уровня middle
			viii.   Количество сотрудников уровня senior
			ix.     Количество сотрудников уровня lead
			x.      Общий размер оплаты труда всех сотрудников до индексации
			xi.     Общий размер оплаты труда всех сотрудников после индексации
			xii.    Общее количество оценок А
			xiii.   Общее количество оценок B
			xiv.    Общее количество оценок C
			xv.     Общее количество оценок D
			xvi.    Общее количество оценок Е
			xvii.   Средний показатель коэффициента премии
			xviii.  Общий размер премии.
			xix.    Общую сумму зарплат(+ премии) до индексации
			xx.     Общую сумму зарплат(+ премии) после индексации(премии не индексируются)
			xxi.    Разницу в % между предыдущими двумя суммами(первая/вторая)
*/

WITH
-- временная таблица для задач I-V
i_v AS (
			SELECT dept.dept_name,
				   dept.cheef_ID AS dept_cheef,
				   COUNT(empl.e_ID) AS dept_employees,
				   AVG(AGE(CURRENT_DATE, empl.start_work)) AS avg_experience,
				   ROUND(AVG(empl.salary)) AS avg_salary
			FROM empl
			LEFT OUTER JOIN dept ON empl.dept_ID = dept.dept_ID
			GROUP BY dept.dept_name, dept.cheef_ID),

-- временная таблица для задач VI-IX
vi_ix AS (
			SELECT dept_ID,
				   grade,
				   COUNT(e_ID) AS graded_employees
			FROM empl
			GROUP BY dept_ID, grade
			ORDER BY dept_ID),
			
	-- временные таблицы для решения задач X-XI
cases AS (
			SELECT *,
				  CASE
					  WHEN mark = 'A' THEN 0.2
					  WHEN mark = 'B' THEN 0.1
					  WHEN mark = 'C' THEN 0
					  WHEN mark = 'D' THEN -0.1
					  WHEN mark = 'E' THEN -0.2
				  END AS coef
			FROM grades),

coef AS (
			SELECT e_ID,
				   SUM(coef)+1 AS year_сoef
			FROM cases
			GROUP BY e_ID
			ORDER BY e_ID),

	-- врем. таблица для индексирования ЗП
joined_coef AS (
			SELECT empl.e_ID AS employee_ID,
				   empl.shortname AS employee_name,
				   empl.dept_ID,
				   CASE
						WHEN coef.year_сoef >= 1.2 THEN 1.2
						WHEN coef.year_сoef < 1.2 AND coef.year_сoef >= 1 THEN 1.1
						ELSE 1
				   END AS salary_rising,
				   empl.salary AS old_salary,
				   empl.salary*(CASE
									WHEN coef.year_сoef >= 1.2 THEN 1.2
									WHEN coef.year_сoef < 1.2 AND coef.year_сoef >= 1 THEN 1.1
									ELSE 1
							    END) AS new_salary
			 FROM empl
			 LEFT OUTER JOIN coef ON coef.e_ID = empl.e_ID),

-- временная таблица для решения задач X-XI
-- либо так:
x_xi AS (
			SELECT SUM(old_salary) AS total_old_salary, SUM(new_salary) AS total_new_salary
			FROM joined_coef),
-- либо так:
x_xi_1 AS (
			SELECT dept_ID,
				   SUM(old_salary) AS dept_old_salary,
				   SUM(new_salary) AS dept_new_salary
			FROM joined_coef
			GROUP BY dept_ID),

-- временная таблица для решения задач XII-XVI
xii_xvi AS (
			SELECT empl.dept_ID,
				   grades.mark,
				   COUNT(mark)
			FROM grades
			LEFT OUTER JOIN empl ON grades.e_ID=empl.e_ID
			GROUP BY empl.dept_ID, grades.mark
			ORDER BY empl.dept_ID),

-- временная таблица для решения задач XVII-XVIII
/*
	примем за коэффициет премии оценки получаемые сотрудниками по шкале эффективности и преобразуемые по правилу
	A = +0.2 / B = +0.1 / C = 1 / D = -0.1 / E = -0.2 к 1, премия определяется по формуле
	"месячная ЗП * коэф.премии"
*/

bonus_coef AS (
			SELECT e_ID,
				   SUM(CASE
					   		WHEN mark = 'A' THEN 0.2
					   		WHEN mark = 'B' THEN 0.1
					   		WHEN mark = 'C' THEN 0
					   		WHEN mark = 'D' THEN -0.1
					   		WHEN mark = 'E' THEN -0.2
				   		END) + 1 AS bonus_coef
			FROM grades
			GROUP BY e_ID),
			
	-- средний размер коэфф. премии и общий размер премии по отделам
xvii_xviii AS (
			SELECT --bonus_coef.e_ID,
				   empl.dept_ID,
				   --bonus_coef.bonus_coef,
				   ROUND(AVG(bonus_coef.bonus_coef), 2) AS avg_bonus,
				   SUM(ROUND(empl.salary*bonus_coef.bonus_coef)) AS total_bonus_value
			FROM bonus_coef
			LEFT OUTER JOIN empl ON bonus_coef.e_ID = empl.e_ID
			GROUP BY empl.dept_ID
			ORDER BY empl.dept_ID),
			
/*
	задания XIX-XXI мне непонятны. Получается (ЗП+премия)+Х=ЗП*индесация+премия, т.е. величина премии сокращается
	и не принимает участя в расчётах, разница находится как Х = ЗП*(индексация-1). Выполнять не стал, это 
	необязательная часть.
*/

-- Ответы на подзадачи содержатся во временных таблицах i_v | vi_ix | x_xi_1 | xii_xvi | xvii_xviii
-- Ниже представлена попытка свести их в единый отчёт, но "длинная" форма получается не очень хорошо читаемой
-- продолжать не стал.

one AS (
			SELECT i_v.dept_name,
				   empl.shortname AS dept_cheef,
				   i_v.dept_employees,
				   i_v.avg_experience,
				   i_v.avg_salary
			FROM i_v
			LEFT OUTER JOIN empl ON empl.e_ID = i_v.dept_cheef
	   ),
	   
two AS (
			SELECT dept.dept_ID, one.*
			FROM one
			LEFT OUTER JOIN dept ON dept.dept_name=one.dept_name
	   )
	   
select two.*,
	   vi_ix.grade,
	   vi_ix.graded_employees
from two
LEFT OUTER JOIN vi_ix ON vi_ix.dept_ID = two.dept_ID