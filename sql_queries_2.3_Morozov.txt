-- создаём указанные в задании таблицы и добавляем в них записи

-- таблица сотрудников
CREATE TABLE IF NOT EXISTS empl
	(
	e_ID SERIAL PRIMARY KEY,
	shortname VARCHAR (30) NOT NULL,
	birthday DATE NOT NULL,
	start_work DATE NOT NULL,
	job_title VARCHAR(50) NOT NULL,
	grade VARCHAR(10) NOT NULL,
	salary REAL NOT NULL,
	dept_ID INTEGER NOT NULL,
	driver_license BOOLEAN NOT NULL
	);
	
-- добавляем записи	
INSERT INTO empl (shortname, birthday, start_work, job_title, grade, salary, dept_ID, driver_license)
VALUES
('Иванов И.С.',	'1980-12-22',	'1999-12-22',	'Инженер-программист',	'Lead',	200000,	1,	true),
('Богданов Х.М.',	'1975-10-10',	'1996-03-10',	'Инженер данных',	'Senior',	300000,	1,	true),
('Крышина Т.В.',	'1981-12-22',	'1995-12-02',	'Математик',	'-',	270000,	1,	true),
('Бобрик А.Г.',	'1971-09-02',	'1991-09-01',	'Инженер-программист',	'Middle',	180000,	1,	false),
('Таарсова Т.Б.',	'1980-01-01',	'2005-03-01',	'Генеральный директор',	'-',	150000,	2,	false),
('Рушкин А.С.',	'1988-11-15',	'2010-05-10',	'Маркетолог',	'-',	120000,	2,	false),
('Кружкин В.С.',	'1989-08-08',	'2015-10-28',	'Инженер данных',	'Junior',	90000,	1,	true),
('Балалаева Е.Б.',	'1990-04-07',	'2018-09-11',	'Главный бухгалтер',	'-',	200000,	2,	false),
('Тютин К.С.',	'1976-07-20',	'2015-07-20',	'Инженер-программист',	'Middle',	212000,	1,	true),
('Кржыч Т.П.',	'1988-03-08',	'2018-05-17',	'Бухгалтер',	'-',	120000,	2,	false),
('Мкртычан Е.П.',	'1980-11-11',	'2019-12-12',	'Инженер-программист',	'Lead',	210000,	1,	true),
('Петросян Е.С.',	'1985-06-12',	'2000-07-05',	'Ведущий инженер-программист',	'Senior',	300000,	1,	true),
('Тарасов М.Б.',	'1980-02-01',	'2003-02-01',	'Зам. ген. директора',	'-',	160000,	2,	true),
('Ракушкин А.С.',	'1988-10-13',	'2010-05-10',	'Инженер-программист',	'Junior',	90000,	1,	false),
('Кружкина В.С.',	'1990-09-06',	'2015-10-28',	'Инженер данных',	'Junior',	90000,	1,	true),
('Балалаев Е.Б.',	'1988-05-07',	'2018-09-11',	'Менеджер проектов',	'-',	90000,	2,	true), 
('Тютькин В.С.',	'1979-03-22',	'2012-07-20',	'Инженер-программист',	'Middle',	201000,	1,	true),
('Акржыч Б.А.',	'1987-08-17',	'2019-05-17',	'Менеджер проекторв',	'-',	120000,	2,	true),
('Макаров-Вольский Б.Ю.',	'1980-12-13',	'2019-12-12',	'Инженер-программист',	'Middle',	214500,	1,	true),
('Петросян Е.В.',	'1982-08-22',	'1999-06-05',	'Ведущий инженер-программист',	'Senior',	298000,	1,	true);
 
-- таблица с отделами
CREATE TABLE IF NOT EXISTS dept
	(
	dept_ID SERIAL PRIMARY KEY,
	dept_name VARCHAR (50) NOT NULL,
	cheef_ID INTEGER NOT NULL
	);
	
INSERT INTO dept (dept_name, cheef_ID)
VALUES
('IT-отдел',	12),
('Маркетинговый отдел',	5);

-- таблица с оценками эффективности (A, B, C, D, E)
CREATE TABLE IF NOT EXISTS grades
	(
	e_ID INTEGER,
	mark VARCHAR (1) DEFAULT ('C') NOT NULL,
	mark_date DATE NOT NULL
	);
	
INSERT INTO grades (e_ID, mark, mark_date)
VALUES
(1,	'B',	'2022-03-25'),
(1,	'A',	'2022-06-25'),
(1,	'C',	'2022-09-25'),
(1,	'A',	'2022-12-25'),
(2,	'A',	'2022-03-25'),
(2,	'B',	'2022-06-25'),
(2,	'C',	'2022-09-25'),
(2,	'C',	'2022-12-25'),
(3,	'B',	'2022-03-25'),
(3,	'A',	'2022-06-25'),
(3,	'C',	'2022-09-25'),
(3,	'C',	'2022-12-25'),
(4,	'C',	'2022-03-25'),
(4,	'C',	'2022-06-25'),
(4,	'A',	'2022-09-25'),
(4,	'A',	'2022-12-25'),
(5,	'D',	'2022-03-25'),
(5,	'A',	'2022-06-25'),
(5,	'D',	'2022-09-25'),
(5,	'A',	'2022-12-25'),
(6,	'D',	'2022-03-25'),
(6,	'B',	'2022-06-25'),
(6,	'A',	'2022-09-25'),
(6,	'E',	'2022-12-25'),
(7,	'D',	'2022-03-25'),
(7,	'A',	'2022-06-25'),
(7,	'E',	'2022-09-25'),
(7,	'A',	'2022-12-25'),
(8,	'E',	'2022-03-25'),
(8,	'A',	'2022-06-25'),
(8,	'A',	'2022-09-25'),
(8,	'C',	'2022-12-25'),
(9,	'D',	'2022-03-25'),
(9,	'D',	'2022-06-25'),
(9,	'A',	'2022-09-25'),
(9,	'B',	'2022-12-25'),
(10,	'B',	'2022-03-25'),
(10,	'A',	'2022-06-25'),
(10,	'A',	'2022-09-25'),
(10,	'D',	'2022-12-25'),
(11,	'A',	'2022-03-25'),
(11,	'C',	'2022-06-25'),
(11,	'A',	'2022-09-25'),
(11,	'D',	'2022-12-25'),
(12,	'B',	'2022-03-25'),
(12,	'B',	'2022-06-25'),
(12,	'B',	'2022-09-25'),
(12,	'E',	'2022-12-25'),
(13,	'B',	'2022-03-25'),
(13,	'C',	'2022-06-25'),
(13,	'B',	'2022-09-25'),
(13,	'C',	'2022-12-25'),
(14,	'B',	'2022-03-25'),
(14,	'B',	'2022-06-25'),
(14,	'B',	'2022-09-25'),
(14,	'B',	'2022-12-25'),
(15,	'A',	'2022-03-25'),
(15,	'D',	'2022-06-25'),
(15,	'E',	'2022-09-25'),
(15,	'A',	'2022-12-25');

-- добавим записи о новых сотрудниках и новом отделе в соотв. таблицы
INSERT INTO grades (e_ID, mark, mark_date)
VALUES
(21,	'B',	'2022-09-25'),
(21,	'A',	'2022-12-25'),
(22,	'A',	'2022-03-25'),
(22,	'B',	'2022-06-25'),
(22,	'A',	'2022-09-25'),
(22,	'B',	'2022-12-25'),
(23,	'B',	'2022-09-25'),
(23,	'B',	'2022-12-25');
	
INSERT INTO dept (dept_name, cheef_ID)
VALUES
('Аналитический отдел',	22);

INSERT INTO empl (shortname, birthday, start_work, job_title, grade, salary, dept_ID, driver_license)
VALUES
('Гонсалес Ж.П.',	'1984-05-04',	'2021-12-02',	'Аналитик данных',	'Junior',	150000,	3,	false),
('Морозов Е.А.',	'1987-10-27',	'2021-07-10',	'Ведущий аналитик',	'Lead',	250000,	3,	true),
('Спичкин Ф.Е.',	'1986-10-17',	'2022-01-15',	'Аналитик данных',	'Middle',	170000,	3,	true);

	
-- таблицы созданы, данные добавлены, ниже приводится решение задач из п.6
	
	--   o   Уникальный номер сотрудника, его ФИО и стаж работы – для всех сотрудников компании
	SELECT e_ID,
	   shortname,
	   AGE(CURRENT_DATE,start_work) AS experience
	FROM empl;

	--   o   Уникальный номер сотрудника, его ФИО и стаж работы – только первых 3-х сотрудников
	--       (считаем по убыванию стажа работы)
	SELECT e_ID,
	   shortname,
	   AGE(CURRENT_DATE,start_work) AS experience
	FROM empl
	ORDER BY experience DESC
	LIMIT 3;

	--   o   Уникальный номер сотрудников - водителей
	SELECT e_ID,
	   shortname
	FROM empl
	WHERE driver_license = 'true';

	--   o   Выведите номера сотрудников, которые хотя бы за 1 квартал получили оценку D или E
	SELECT e_ID,
	   shortname
	FROM empl
	WHERE empl.e_ID IN (SELECT DISTINCT(e_ID)
					FROM grades
					WHERE mark='D' OR mark='E');

	--   o   Выведите самую высокую зарплату в компании.
	SELECT e_ID, 
	   shortname,
	   salary
	FROM empl
	ORDER BY salary DESC
	LIMIT 3;

	-- или просто MAX() если только определить макс.величину и вывести одну ячейку
	SELECT MAX(salary)
	FROM empl;

	--   o   Выведите название самого крупного отдела
	WITH
	depts AS (SELECT dept.dept_id,
		  dept.dept_name,
		  COUNT(empl.e_ID) AS quantity
		  FROM empl
		  LEFT OUTER JOIN dept ON dept.dept_ID = empl.dept_ID
		  GROUP BY dept.dept_ID
		  ORDER BY quantity DESC)

	SELECT dept_name
	FROM depts
	LIMIT 1;

	--   o   * Выведите номера сотрудников от самых опытных до вновь прибывших
	SELECT e_ID AS ID_сотрудников_по_убыванию_стажа
	FROM (
		SELECT e_ID,
			   shortname,
			   AGE(CURRENT_DATE,start_work) AS experience
		FROM empl
		ORDER BY experience DESC
	 ) AS exp_list;

--   o   * Рассчитайте среднюю зарплату для каждого уровня сотрудников
SELECT grade,
	   ROUND(AVG(salary))
FROM empl
GROUP BY grade;

--   o   * Добавьте столбец с информацией о коэффициенте годовой премии к основной таблице. Коэффициент рассчитывается по такой схеме: базовое значение коэффициента – 1, каждая оценка действует на коэффициент так:
/*			·         Е – минус 20%
			·         D – минус 10%
			·         С – без изменений
			·         B – плюс 10%
			·         A – плюс 20%		*/

WITH 
cases AS
		(SELECT *,
			   CASE
				   WHEN mark = 'A' THEN 0.2
				   WHEN mark = 'B' THEN 0.1
				   WHEN mark = 'C' THEN 0
				   WHEN mark = 'D' THEN -0.1
				   WHEN mark = 'E' THEN -0.2
			   END AS coef
		FROM grades),

bonus AS
		(SELECT e_ID,
			   SUM(coef)+1 AS year_bonus
		FROM cases
		GROUP BY e_ID
		ORDER BY e_ID)
		
SELECT empl.e_ID AS employee_ID,
	   empl.shortname AS employee_name,
	   -- bonus.year_bonus умышленно заполнен не целиком, преобразуем NULL значения
	   -- получающиеся при объединении таблиц в более удобо-читаемый вид, присвоив
	   -- таким ячейкам итоговое значение коэффициента = 1
	   CASE
	   		WHEN bonus.year_bonus ISNULL THEN 1 ELSE bonus.year_bonus
		END AS year_bonus
FROM empl
LEFT OUTER JOIN bonus ON bonus.e_ID = empl.e_ID;

-- drop table empl, dept, grades;
-- select * from empl;